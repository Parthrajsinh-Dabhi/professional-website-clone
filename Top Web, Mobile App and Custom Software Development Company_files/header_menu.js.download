function globalNavDropdowns(t) { var o = this; if (this.container = document.querySelector(t), this.container && !this.container.classList.contains("no-dropdown") && (this.root = this.container.querySelector(".navRoot"), this.primaryNav = this.root.querySelector(".navSection.primary"), this.primaryNavItem = this.root.querySelector(".navSection.primary .rootLink:last-child"), this.secondaryNavItem = this.root.querySelector(".navSection.secondary .rootLink:first-child"), this.primaryNav)) { this.checkCollision(), window.addEventListener("load", this.checkCollision.bind(this)), window.addEventListener("resize", this.checkCollision.bind(this)), this.container.classList.add("noDropdownTransition"), this.dropdownBackground = this.container.querySelector(".dropdownBackground"), this.dropdownBackgroundAlt = this.container.querySelector(".alternateBackground"), this.dropdownRoot = this.container.querySelector(".dropdownRoot"), this.dropdownContainer = this.container.querySelector(".dropdownContainer"), this.dropdownArrow = this.container.querySelector(".dropdownArrow"), this.dropdownRoots = indiaNic.queryArray(".hasDropdown", this.root), this.dropdownSections = indiaNic.queryArray(".dropdownSection", this.container).map(function (t) { return { el: t, name: t.getAttribute("data-dropdown"), content: t.querySelector(".dropdownContent") } }); var e = window.PointerEvent ? { end: "pointerup", enter: "pointerenter", leave: "pointerleave" } : { end: "touchend", enter: "mouseenter", leave: "mouseleave" }; this.keyDownHandler = null, this.dropdownRoots.forEach(function (t, i) { t.addEventListener(e.end, function (e) { e.preventDefault(), e.stopPropagation(), o.toggleDropdown(t) }), t.addEventListener("focusin", function (e) { o.stopCloseTimeout(), o.openDropdown(t, { keyboardNavigation: !0 }) }), t.addEventListener(e.enter, function (e) { "touch" != e.pointerType && (o.stopCloseTimeout(), o.openDropdown(t)) }), t.addEventListener(e.leave, function (t) { "touch" != t.pointerType && o.startCloseTimeout() }) }), this.dropdownContainer.addEventListener(e.end, function (t) { t.stopPropagation() }), this.dropdownContainer.addEventListener(e.enter, function (t) { "touch" != t.pointerType && o.stopCloseTimeout() }), this.dropdownContainer.addEventListener(e.leave, function (t) { "touch" != t.pointerType && o.startCloseTimeout() }), document.body.addEventListener(e.end, function (t) { indiaNic.touch.isDragging || o.closeDropdown() }), this.container.classList.add("initialized") } } function globalNavPopup(t) { var o = this, e = indiaNic.touch.isSupported ? "touchend" : "click"; this.activeClass = "globalPopupActive", this.root = document.querySelector(t), this.root && (this.link = this.root.querySelector(".rootLink"), this.popup = this.root.querySelector(".popup"), this.closeButton = this.root.querySelector(".popupCloseButton"), this.link.addEventListener(e, function (t) { t.stopPropagation(), o.togglePopup() }), this.popup.addEventListener(e, function (t) { t.stopPropagation() }), this.popup.addEventListener("transitionend", function (t) { if (o.isOpening) { o.isOpening = !1; var e = o.popup.getBoundingClientRect().top + window.scrollY; if (e < 15) { var i = 15 - e; o.popup.style.transform = "translateY(" + i + "px)" } } }), this.closeButton && this.closeButton.addEventListener(e, function (t) { o.closeAllPopups() }), document.body.addEventListener(e, function (t) { indiaNic.touch.isDragging || o.closeAllPopups() }, !1)) } window.indiaNic = { queryArray: function (t, o) { return o || (o = document.body), Array.prototype.slice.call(o.querySelectorAll(t)) }, ready: function (t) { "loading" !== document.readyState ? t() : document.addEventListener("DOMContentLoaded", t) } }, indiaNic.isRetina = window.devicePixelRatio > 1.3, indiaNic.mobileViewportWidth = 670, indiaNic.isMobileViewport = window.innerWidth < indiaNic.mobileViewportWidth, window.addEventListener("resize", function () { indiaNic.isMobileViewport = window.innerWidth < indiaNic.mobileViewportWidth }), indiaNic.touch = { isSupported: "ontouchstart" in window || navigator.maxTouchPoints, isDragging: !1 }, document.addEventListener("DOMContentLoaded", function () { document.body.addEventListener("touchmove", function () { indiaNic.touch.isDragging = !0 }), document.body.addEventListener("touchstart", function () { indiaNic.touch.isDragging = !1 }) }), indiaNic.supports = { es6: !!window.Symbol && !!window.Symbol.species, pointerEvents: function () { var t = document.createElement("a").style; return t.cssText = "pointer-events:auto", "auto" === t.pointerEvents }(), positionSticky: Boolean(window.CSS && CSS.supports("(position: -webkit-sticky) or (position: sticky)")), masks: !/MSIE|Trident|Edge/i.test(navigator.userAgent) }, globalNavDropdowns.prototype.checkCollision = function () { if (!indiaNic.isMobileViewport) if (1 == this.compact) { var t = document.body.clientWidth, o = this.primaryNav.getBoundingClientRect(); o.left + o.width / 2 > t / 2 && (this.container.classList.remove("compact"), this.compact = !1) } else { var e = this.primaryNavItem.getBoundingClientRect(), i = this.secondaryNavItem.getBoundingClientRect(); e.right > i.left && (this.container.classList.add("compact"), this.compact = !0) } }, globalNavDropdowns.prototype.registerArrowKeyNavigation = function (t, o) { var e = this; null !== this.keyDownHandler && this.unregisterArrowKeyNavigation(); var i = [].slice.call(o.querySelectorAll("a")), n = 0; i[n].focus(), this.keyDownHandler = function (o) { 9 === o.keyCode ? (t.focus(), e.startCloseTimeout()) : 38 === o.keyCode ? (o.preventDefault(), --n < 0 && (n += i.length), i[n].focus()) : 40 === o.keyCode && (o.preventDefault(), ++n >= i.length && (n -= i.length), i[n].focus()) }, this.container.addEventListener("keydown", this.keyDownHandler) }, globalNavDropdowns.prototype.unregisterArrowKeyNavigation = function () { this.container.removeEventListener("keydown", this.keyDownHandler), this.keyDownHandler = null }, globalNavDropdowns.prototype.openDropdown = function (t, o) { var e = this; if (this.activeDropdown !== t) { this.container.classList.add("overlayActive"), this.container.classList.add("dropdownActive"), this.activeDropdown = t, this.activeDropdown.setAttribute("aria-expanded", "true"), this.dropdownRoots.forEach(function (t, o) { t.classList.remove("active") }), t.classList.add("active"); var i, n, r, s = t.getAttribute("data-dropdown"), a = "left"; this.dropdownSections.forEach(function (d) { d.el.classList.remove("active"), d.el.classList.remove("left"), d.el.classList.remove("right"), d.name == s ? (d.el.setAttribute("aria-hidden", "false"), d.el.classList.add("active"), a = "right", i = d.content.offsetWidth, n = d.content.offsetHeight, d.content.getAttribute("data-fixed") ? d.content.setAttribute("data-fixed", !0) : (d.content.style.width = i + "px", d.content.style.height = n + "px"), r = d.content, o && o.keyboardNavigation && e.registerArrowKeyNavigation(t, d.el)) : (d.el.classList.add(a), d.el.setAttribute("aria-hidden", "true")) }); var d = i / 380, c = n / 400, l = t.getBoundingClientRect(), p = l.left + l.width / 2 - i / 2; p = Math.round(Math.max(p, 10)), clearTimeout(this.disableTransitionTimeout), this.enableTransitionTimeout = setTimeout(function () { e.container.classList.remove("noDropdownTransition") }, 50), this.dropdownBackground.style.transform = "translateX(" + p + "px) scaleX(" + d + ") scaleY(" + c + ")", this.dropdownContainer.style.transform = "translateX(" + p + "px)", this.dropdownContainer.style.width = i + "px", this.dropdownContainer.style.height = n + "px"; var u = Math.round(l.left + l.width / 2); this.dropdownArrow.style.transform = "translateX(" + u + "px) rotate(45deg)"; var h = r.children[0].offsetHeight / c; this.dropdownBackgroundAlt.style.transform = "translateY(" + h + "px)", window.siteAnalytics && window.siteAnalytics.trackGlobalNavDropdownOpen && window.siteAnalytics.trackGlobalNavDropdownOpen(s) } }, globalNavDropdowns.prototype.closeDropdown = function () { var t = this; this.activeDropdown && (this.dropdownRoots.forEach(function (t, o) { t.classList.remove("active") }), this.dropdownContainer.querySelector('[aria-hidden="false"]').setAttribute("aria-hidden", "true"), clearTimeout(this.enableTransitionTimeout), this.disableTransitionTimeout = setTimeout(function () { t.container.classList.add("noDropdownTransition") }, 50), this.container.classList.remove("overlayActive"), this.container.classList.remove("dropdownActive"), this.activeDropdown.setAttribute("aria-expanded", "false"), this.activeDropdown = void 0, this.unregisterArrowKeyNavigation()) }, globalNavDropdowns.prototype.toggleDropdown = function (t) { this.activeDropdown === t ? this.closeDropdown() : this.openDropdown(t) }, globalNavDropdowns.prototype.startCloseTimeout = function () { var t = this; t.closeDropdownTimeout = setTimeout(function () { t.closeDropdown() }, 50) }, globalNavDropdowns.prototype.stopCloseTimeout = function () { clearTimeout(this.closeDropdownTimeout) }, globalNavPopup.prototype.togglePopup = function () { var t = this.root.classList.contains(this.activeClass); this.closeAllPopups(!0), t || (this.root.classList.add(this.activeClass), this.isOpening = !0) }, globalNavPopup.prototype.closeAllPopups = function (t) { for (var o = document.getElementsByClassName(this.activeClass), e = 0; e < o.length; e++)o[e].querySelector(".popup").style.transform = null, o[e].classList.remove(this.activeClass) }, indiaNic.supports.pointerEvents || indiaNic.load.css("v3/shared/navigation_ie10.css"), indiaNic.ready(function () { new globalNavDropdowns(".globalNav"), new globalNavPopup(".globalNav .navSection.mobile"), new globalNavPopup(".globalFooterNav .select.country"), new globalNavPopup(".globalFooterNav .select.language"), document.body.addEventListener("keydown", function (t) { 9 == t.keyCode && document.body.classList.add("keyboard-navigation") }), document.body.addEventListener("mousedown", function (t) { document.body.classList.remove("keyboard-navigation") }) });
jQuery(window).scroll(function($) {
    if (jQuery(this).scrollTop() > 90) {
        jQuery('.globalNav').addClass('sticky')
        jQuery('.nav-mobile').addClass('sticky')
        jQuery(".logo, .secondary").css("opacity", 0 - jQuery(window).scrollTop() / 100);
    } else {
        jQuery('.globalNav').removeClass('sticky')
        jQuery('.nav-mobile').removeClass('sticky')
        jQuery(".logo, .secondary").css("opacity", 1 - jQuery(window).scrollTop() / 100);
    }
  });

  // On page load add active class in menu
  jQuery(window).load(function() {
    // Get the current page URL
    var currentUrl = window.location.href;
  
    // Get all the menu items
    var menuItems = jQuery(".navSection.primary a");
  
    // Loop through the menu items
    for (var i = 0; i < menuItems.length; i++) {
      // Get the href attribute of the current menu item
      var href = menuItems[i].href;
  
      // If the href of the current menu item matches the current page URL
      if (href === currentUrl) {
        // Add the "active" class to the current menu item
        menuItems[i].classList.add("link-active");
      }
    }
  });